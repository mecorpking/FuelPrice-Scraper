declare const FileTypes: {
    readonly IMAGE: readonly ["jpeg", "jpg", "png", "gif", "bmp", "svg", "webp"];
    readonly EXCEL: readonly ["xls", "xlsx"];
    readonly AUDIO: readonly ["mp3", "wav", "ogg", "m4a", "flac"];
    readonly CSV: readonly ["csv"];
    readonly PDF: readonly ["pdf"];
    readonly ZIP: readonly ["zip"];
    readonly VIDEO: readonly ["mp4", "avi", "mov", "wmv", "flv", "mkv"];
};
type ControlInput<V, P = {}> = {
    label?: string;
    defaultValue?: V;
    helpText?: string;
    isRequired?: boolean | ((data: any) => boolean);
    isDisabled?: (data: any) => boolean;
    disabledMessage?: string;
    isShown?: (data: any) => boolean;
    isMetadata?: boolean;
    validate?: (value: V, otherData: any) => string | string[] | undefined;
} & P;
type TextControlInput<V, P = {}> = ControlInput<V, P> & {
    trim?: boolean;
    placeholder?: string;
};
type LimitOptions = {
    limit?: number;
};
type ListOfTextControlInput<V, P = {}> = TextControlInput<V, P> & LimitOptions;
type LinkControlInput<V, P = {}> = ControlInput<V, P> & {
    placeholder?: string;
};
type ListOfLinkControlInput<V, P = {}> = LinkControlInput<V, P> & LimitOptions;
type FilePickerOptions = ControlInput<null, {
    accept?: string[];
    multiple?: boolean;
}> & LimitOptions;
type NumberControlInput<V, P = {}> = ControlInput<V, P> & {
    placeholder?: string;
    min?: number;
    max?: number;
};
type Option = {
    value: string;
    label: string;
};
type ChooseOption = Option;
export type WithChooseOptions = {
    options?: ChooseOption[];
};
type WithOptions = {
    options?: Option[];
};
export type Control<V, P = {}> = {
    id: string;
    type: string;
    label: string;
} & ControlInput<V, P>;
declare class SectionControls {
    private isSectionControl;
    private controls;
    private allControlIds;
    private add;
    addProxySection({ label, isList, }?: {
        label?: string;
        isList?: boolean;
    }): this;
    text(id: string, props?: TextControlInput<string>): this;
    listOfTexts(id: string, props?: ListOfTextControlInput<string[]>): this;
    number(id: string, props?: NumberControlInput<number>): this;
    numberGreaterThanOrEqualToZero(id: string, props?: NumberControlInput<number>): this;
    numberGreaterThanOrEqualToOne(id: string, props?: NumberControlInput<number>): this;
    switch(id: string, props?: Omit<ControlInput<boolean>, "required">): this;
    checkbox(id: string, props?: Omit<ControlInput<boolean>, "required">): this;
    textarea(id: string, props?: TextControlInput<string>): this;
    link(id: string, props?: LinkControlInput<string>): this;
    listOfLinks(id: string, props?: ListOfLinkControlInput<string[]>): this;
    choose(id: string, props?: ControlInput<string, WithChooseOptions>): this;
    select(id: string, props?: ControlInput<string, WithOptions>): this;
    filePicker(id: string, { accept, multiple, ...props }?: FilePickerOptions): this;
    getFilePickerControlIds(): string[];
    multiSelect(id: string, props?: ControlInput<string[], WithOptions> & LimitOptions): this;
    addLangSelect({ languages, label, defaultValue, }?: {
        languages?: Option[];
        label?: string;
        defaultValue?: string;
    }): this;
    addCountrySelect({ countries, label, defaultValue, }?: {
        countries?: Option[];
        label?: string;
        defaultValue?: string;
    }): this;
    private defaultData;
    private getDefaultData;
    private getBackendValidationResult;
    private validate;
    private getTypeValidationErrorMessage;
    private raiseTypeValidationErrorMessage;
    private iterateControls;
}
declare class Controls {
    private isSectionControl;
    private controls;
    private allControlIds;
    private add;
    section(label: string, defineControls: (section: SectionControls) => void): this;
    addProxySection({ label, isList, }?: {
        label?: string;
        isList?: boolean;
    }): this;
    text(id: string, props?: TextControlInput<string>): this;
    listOfTexts(id: string, props?: ListOfTextControlInput<string[]>): this;
    number(id: string, props?: NumberControlInput<number>): this;
    numberGreaterThanOrEqualToZero(id: string, props?: NumberControlInput<number>): this;
    numberGreaterThanOrEqualToOne(id: string, props?: NumberControlInput<number>): this;
    switch(id: string, props?: Omit<ControlInput<boolean>, "required">): this;
    checkbox(id: string, props?: Omit<ControlInput<boolean>, "required">): this;
    textarea(id: string, props?: TextControlInput<string>): this;
    link(id: string, props?: LinkControlInput<string>): this;
    listOfLinks(id: string, props?: ListOfLinkControlInput<string[]>): this;
    choose(id: string, props?: ControlInput<string, WithChooseOptions>): this;
    select(id: string, props?: ControlInput<string, WithOptions>): this;
    filePicker(id: string, { accept, multiple, ...props }?: FilePickerOptions): this;
    getFilePickerControlIds(): string[];
    multiSelect(id: string, props?: ControlInput<string[], WithOptions> & LimitOptions): this;
    addLangSelect({ languages, label, defaultValue, }?: {
        languages?: Option[];
        label?: string;
        defaultValue?: string;
    }): this;
    addCountrySelect({ countries, label, defaultValue, }?: {
        countries?: Option[];
        label?: string;
        defaultValue?: string;
    }): this;
    private defaultData;
    private getDefaultData;
    private getBackendValidationResult;
    private validate;
    private getTypeValidationErrorMessage;
    private raiseTypeValidationErrorMessage;
    private iterateControls;
}
declare function createControls(input_js: string): Controls;
export { Controls, createControls, FileTypes };
//# sourceMappingURL=index.d.ts.map